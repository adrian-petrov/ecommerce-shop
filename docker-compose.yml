version: '3.8'

services:
  # Elastic certs setup  
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [[ -z ${ELASTIC_PASSWORD} ]]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      - setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    deploy:
      resources:
        limits:
          memory: 1000M
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
      
  api:
    image: api
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    restart: always
    ports: 
      - ${KESTREL_PORT}:80
      - ${KESTREL_SSL_PORT}:443
    depends_on:
      - db
      - es01
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT} # debug runs in development mode
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${KESTREL_CERTIFICATES_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=${KESTREL_CERTIFICATES_PATH}
      - DOCKER_ConnectionStrings__DefaultConnection=${CONNECTION_STRINGS_DEFAULT_CONNECTION}
      - DOCKER_BasePaths__SeedDataPath=${SEED_DATA_PATH}
      - DOCKER_BasePaths__ContentPath=${CONTENT_PATH}
      - DOCKER_Elastic__Host=${ELASTIC_HOST}
      - DOCKER_Elastic__Port=${ELASTIC_PORT}
      - DOCKER_Elastic__User=${ELASTIC_USER}
      - DOCKER_Elastic__Password=${ELASTIC_PASSWORD}
      - DOCKER_Elastic__CertificateAuthorities=${ELASTIC_CA_PATH}
      - DOCKER_Jwt__Issuer=${JWT_ISSUER}
      - DOCKER_Jwt__AdminIssuer=${JWT_ADMIN_ISSUER}
      - DOCKER_Jwt__Secret=${JWT_SECRET}
      - DOCKER_Jwt__RefreshTokenTTL=${JWT_REFRESHTOKENTTL}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ~/.vsdbg:/remote_debugger:rw
      - ~/.aspnet/https:/https:ro
  
  db: 
    image: mysql:8.0.29
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DB=${MYSQL_DB}
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - ${MYSQL_PORT}:3306
    restart: always


volumes:
  mysql-data:
  certs:
    driver: local
  esdata01:
    driver: local